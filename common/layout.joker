<template>
    <div class="container">
        <NavBar />
        <div class="nav-bar">
            <i class="jk-icon-menu" @click="handleOpenMenu" />
            <span @click="handleOpenMenu">@(lang === "zh-CN" ? "本章菜单" : "Chapter menu")</span>
        </div>
        <div class="pageContainer">
            <jk-scrollbar ref="scroll" @scroll="handleScroll">
                <router-view @updated="routerViewUpdated"></router-view>
            </jk-scrollbar>
        </div>
        <ChapterMenu ref="chapterMenu" @go-to="handleMenuGo" />
    </div>
    <jk-drawer ref="menu-panel" direction="left" title="@(lang === 'zh-CN' ? '本章菜单' : 'Chapter menu')" size="70%">
        <NavBar inPanel />
    </jk-drawer>
</template>
<script>
import { Component, VNode } from "@joker.front/core";
import TopBar from "./components/topbar.joker";
import NavBar from "./components/navbar.joker";
import ChapterMenu from "./components/chapter-menu.joker";
import { router } from "@joker.front/router";
import { getLang } from "./utils";
import { hideLoading, showLoading } from "./loading";

export default class extends Component {
    components = {
        TopBar,
        NavBar,
        ChapterMenu
    };
    lang = getLang();
    created() {
        this.$watch(
            () => router.route.value,
            (newData, oldData) => {
                this.$getRef("menu-panel")?.component.close();
                if (newData.fullPath !== oldData.fullPath) showLoading();
            }
        );
        showLoading();
    }

    get scroll() {
        return this.$getRef("scroll")?.component;
    }
    get chapterMenu() {
        return this.$getRef("chapterMenu")?.component;
    }

    routerViewUpdated() {
        this.scroll?.scrollTo({ top: 0, left: 0 });

        this.chapterMenu?.refresh();

        this.$nextUpdatedRender(() => {
            hideLoading();
        });
    }

    handleScroll(e: VNode.Event<{ y: number }>) {
        this.chapterMenu?.scrollChange(e.data.y);
    }

    handleMenuGo(e: VNode.Event<number>) {
        this.scroll?.scrollTo({ top: e.data, left: 0 });
    }
    handleOpenMenu() {
        this.$getRef("menu-panel")?.component.open();
    }
}
</script>
<style lang="scss" scoped>
.container {
    height: 100%;
    overflow: hidden;
    display: flex;

    .pageContainer {
        flex: 1;
        height: 100%;

        overflow: auto;

        :deep(.joker-demo-container) {
            margin: 20px 0;
            padding: 0 290px 0 20px;
        }
    }

    .nav-bar {
        display: none;
    }
    @media (max-width: 1000px) {
        :deep(.joker-demo-container) {
            padding: 0 20px !important;
        }
        :deep(> .page-right) {
            display: none;
        }
    }

    @media (max-width: 800px) {
        .nav-bar {
            display: block;
            height: 35px;
            display: flex;
            align-items: center;
            font-size: 12px;
            padding: 0 20px;
            gap: 5px;
            border-bottom: solid 1px var(--jk-border-color-base);
            i {
                font-size: 14px;
            }
        }
        & {
            flex-direction: column;
        }
        :deep(> .nav) {
            display: none;
        }

        :deep(.joker-demo-container) {
            padding: 0 20px !important;
        }

        :deep(> .page-right) {
            display: none;
        }
    }
}
</style>
