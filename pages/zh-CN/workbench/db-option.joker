<template>
<div ref='container' class='joker-demo-container'>
<h2>数据操作</h2>
<p>本章聚焦于如何对数据库进行各类操作，涵盖基本的增删改查，以及高级的分组查询、聚合统计查询等操作。主要讲解在业务逻辑编排中，<strong>数据库操作</strong>节点的使用方法。</p>
<h3>概述</h3>
<p>在业务编排里，我们能够拖入<strong>数据库操作</strong>节点，以此实现对数据库的访问操作。
<img src="/workbench/db-option.png" alt=""></p>
<p>具体操作步骤如下：</p>
<ol>
<li><strong>选择操作的数据库表</strong>：首先要明确对哪个数据库表进行操作。</li>
<li><strong>确定操作方式</strong>：选定要操作的数据库表之后，再选择具体对该表采取何种操作。</li>
</ol>
<h3>新增数据</h3>
<p>目前平台提供了两种新增数据的方式：单条新增和批量新增。</p>
<h4>单条新增</h4>
<p><img src="/workbench/db-option1.png" alt=""></p>
<p>当选择单条新增时，平台会自动将当前数据库的必填字段展示在数据面板中，方便我们快速进行赋值操作。如果还需要对其他数据字段进行写入，可以点击下方的<strong>其他属性</strong>，进而添加其他字段属性。
<img src="/workbench/db-option2.png" alt=""></p>
<h4>批量增加</h4>
<p>批量增加需要通过自定义数据项数组的方式来创建多条数据，同时平台会对数组类型进行约束。
<img src="/workbench/db-option3.png" alt=""></p>
<h3>删除数据</h3>
<p>平台提供了两种删除数据的方式：根据索引删除和根据条件删除。</p>
<h4>根据索引删除</h4>
<p>根据索引删除是效率最快的一种删除方式。
<img src="/workbench/db-option4.png" alt=""></p>
<p>操作步骤如下：</p>
<ol>
<li><strong>选择数据索引</strong>：可以选择数据表中的唯一值索引，也可以选择联合索引。</li>
<li><strong>填写索引值</strong>：若选择的是联合索引，此处可能需要填写多个值。</li>
</ol>
<h4>根据条件删除多条数据</h4>
<p><img src="/workbench/db-option5.png" alt=""></p>
<p>平台提供了丰富的条件约束，支持我们进行以下操作：</p>
<ul>
<li><strong>单个字段多约束配置</strong>：能为单个字段设置不同的约束条件。</li>
<li><strong>跨表关联约束</strong>：可基于表与表之间的关联关系设置约束。</li>
<li><strong>AND/OR 分组条件</strong>：能通过 AND 或 OR 逻辑将条件进行分组组合，实现更复杂的条件判断。</li>
</ul>
<h3>数据更新</h3>
<p>平台提供了两种数据更新方法：更新单条数据和根据条件更新多条数据。</p>
<h4>更新单条数据</h4>
<p>根据索引修改是效率最快的一种数据修改方式。
<img src="/workbench/db-option6.png" alt=""></p>
<ol>
<li><strong>选择数据索引</strong>：可以选择数据表中的唯一值索引，也可以选择联合索引。</li>
<li><strong>填写索引值</strong>：若选择的是联合索引，此处可能需要填写多个值。</li>
<li><strong>配置更改数据</strong>：选择要更改的字段，并配置新值。</li>
</ol>
<h4>根据条件更新多条数据</h4>
<p><img src="/workbench/db-option7.png" alt=""></p>
<p>平台提供了丰富的条件约束，支持我们进行以下操作：</p>
<ul>
<li><strong>单个字段多约束配置</strong>：能为单个字段设置不同的约束条件。</li>
<li><strong>跨表关联约束</strong>：可基于表与表之间的关联关系设置约束。</li>
<li><strong>AND/OR 分组条件</strong>：能通过 AND 或 OR 逻辑将条件进行分组组合，实现更复杂的条件判断。</li>
</ul>
<h3>数据查询</h3>
<p>数据查询是比较常用的数据操作，平台提供了：<strong>查询单条数据</strong>、<strong>返回第一条</strong>、<strong>根据条件查询多条</strong>、<strong>根据条件和分页数据查询多条</strong>、<strong>根据条件查询符合要求的数据条数</strong>。</p>
<h4>查询单条数据</h4>
<p>查询单条是根据表内索引进行快速查询数据的操作方法。他可以帮助开发人员通过索引查询单条数据。</p>
<p><img src="/workbench/db-option8.png" alt=""></p>
<ol>
<li><strong>选择数据索引</strong>：可以选择数据表中的唯一值索引，也可以选择联合索引。</li>
<li><strong>填写索引值</strong>：若选择的是联合索引，此处可能需要填写多个值。</li>
<li><strong>配置查询数据</strong>：我们可以在这里通过勾选的方式来决定要查询哪些数据。</li>
</ol>
<blockquote>
<p>从上面的图中能够看出，我们的查询支持<strong>多表关联查询</strong>。系统会<strong>自动分析</strong>表关联关系，并以<strong>层级的方式</strong>将其呈现出来。你可以直观地勾选想要输出的字段，操作十分便捷。</p>
</blockquote>
<blockquote>
<p>大家可以放心的是，底层的 ORM 系统会自动分析你所勾选的属性，并自动完成 SQL 优化。对于未被选中的关联表，不会产生性能消耗。</p>
</blockquote>
<h4>返回第一条</h4>
<p>返回第一条数据和返回单条数据这两种方式，都能协助开发人员依据筛选条件返回一条数据。不过，二者存在明显区别。</p>
<p>返回单条数据是依据索引来返回表内唯一的一条数据，这种方式具有较高的针对性和确定性。而返回第一条则是先通过筛选条件筛选出多条数据，然后仅查询排序后位于首位的那一条数据。</p>
<p>从性能方面考量，返回第一条数据的性能要低于根据索引查询一条数据的性能。这是因为返回第一条数据需要先筛选出满足条件的多条数据并进行排序，而根据索引查询则可以直接定位到目标数据，避免了额外的筛选和排序操作。</p>
<p><img src="/workbench/db-option9.png" alt=""></p>
<p>从上述操作示例能够发现，在进行查询操作时，我们拥有更多的查询筛选条件可供选择，而且系统允许我们对数据进行排序。这极大地增强了查询的灵活性与针对性。更多的筛选条件让我们可以更精准地定位到所需数据，而排序功能则能按照我们期望的顺序展示数据，无论是按升序排列以便查看从小到大的顺序，还是按降序排列来获取从大到小的结果，都能轻松实现。这样的设计使得数据查询能够更好地满足多样化的业务需求，提升了数据获取的效率和质量。</p>
<h3>根据条件筛选多条数据</h3>
<p>在此操作中，我们能够依据<strong>查询条件</strong>返回多条符合要求的数据。
<img src="/workbench/db-option10.png" alt=""></p>
<p>平台提供了丰富的配置选项，方便我们对筛选数据进行设置：</p>
<ul>
<li><strong>读取范围</strong>：可以配置跳过的行数以及要读取的行数，这能让我们灵活地获取数据的特定部分，比如只获取数据中的某一段区间，避免一次性读取过多不必要的数据，提高查询效率。</li>
<li><strong>筛选条件</strong>：支持复杂的查询方式。既可以对单个属性进行筛选，也能基于表关联进行筛选。并且能够使用 AND 或 OR 逻辑将条件进行分组组合，从而实现更为复杂的条件判断，精准地定位到我们需要的数据。</li>
<li><strong>输出字段</strong>：通过勾选的方式来选择输出字段，同时也支持表关联查询输出。这意味着我们可以只选择自己关心的字段进行输出，避免返回大量无用的数据，减少数据传输量，并且在涉及多个表关联的查询中，也能方便地选择不同表中的字段进行输出。</li>
<li><strong>排序配置</strong>：允许配置复杂的排序规则，支持分组排序等复杂场景。例如，我们可以按照某个字段进行分组，然后在每个组内再按照其他字段进行排序，使返回的数据按照我们期望的顺序呈现。</li>
</ul>
<blockquote>
<p>这里需要特别注意，该方法返回的结果是一个数组。</p>
</blockquote>
<h4>根据查询条件和分页返回多条数据</h4>
<p>平台提供了一种快速分页查询的功能，我们可以传入页码并快速返回一页的数据。</p>
<p><img src="/workbench/db-option11.png" alt=""></p>
<p>返回值：</p>
<pre><code class="language-js">//总条数
data.total;
//当前页码
data.page;
//一页条数
data.pageSize;
//数据列表
data.list[0].email;
</code></pre>
<h3>根据条件查询数据条数</h3>
<p>我们可以根据查询条件返回符合要求的数据条数。</p>
<p><img src="/workbench/db-option12.png" alt=""></p>
<blockquote>
<p>该方法返回的是<strong>number</strong>类型的正整数。</p>
</blockquote>
<h3>高级操作</h3>
<p>平台提供了高级的数据操作，包括：<strong>分组查询</strong>、<strong>更新或新增</strong>、<strong>聚合统计查询</strong>。</p>
<h4>更新或新增</h4>
<p>从名称中可以知道该方法实现了更新和新增的组合，它会先按照索引去查询目标数据，若查询到则进行更新操作，若查询不到则实现数据新增，是一种高级的数据组合用法。</p>
<p><img src="/workbench/db-option15.png" alt=""></p>
<h4>分组查询</h4>
<p>分组查询是数据库操作中用于按指定字段对数据分组并进行聚合统计的实用功能。在平台里，利用“数据库操作”节点可完成此操作，先选要操作的数据库表，指定分组字段以划分数据组；支持配置多种聚合函数来对每个组进行统计，能返回分组查询的个数（用 COUNT 函数）、最大值（用 MAX 函数）、最小值（用 MIN 函数）以及平均值（用 AVG 函数）；还可配置筛选条件对参与分组的数据预处理，且支持多样的筛选规则；最后通过勾选输出所需字段。</p>
<p><img src="/workbench/db-option13.png" alt=""></p>
<p>在分组查询中，可进行以下几种常见的聚合统计操作：</p>
<ul>
<li><strong>计数</strong>：用于统计分组查询后各个组里命中数据的条数。既可以依据特定字段进行聚合计数，平台还提供了<strong>all</strong>字段，能基于所有数据来进行计数，全面统计数据量。</li>
<li><strong>最大值</strong>：找出每个分组内指定字段的最大数值，帮助了解每组数据在该字段上的上限情况。</li>
<li><strong>最小值</strong>：确定每个分组内指定字段的最小数值，以此掌握每组数据在该字段上的下限水平。</li>
<li><strong>求和</strong>：仅能对数字类型的属性字段进行操作，将每个分组内该数字字段的所有值相加，得出每组的总和，常用于统计数量、金额等数据的汇总情况。</li>
<li><strong>平均值</strong>：同样仅适用于数字类型属性，计算每个分组内指定数字字段的平均值，反映每组数据在该字段上的平均水平。</li>
</ul>
<h4>聚合查询</h4>
<p>聚合查询是在数据库操作里对数据按特定规则分组后进行统计分析的方式，可借助平台 “数据库操作” 节点实现，支持计数（含按 all 字段对所有数据计数）、求最大值、最小值、对数字类型属性求和与求平均值等操作，还能配置筛选条件预处理数据及勾选输出所需字段。</p>
<p><img src="/workbench/db-option14.png" alt=""></p>
<h4>分组/聚合概念侧重点</h4>
<ul>
<li><strong>分组查询</strong>：核心在于将数据按照指定的一个或多个字段进行分组，重点关注数据的分类方式。它把具有相同字段值的数据归为一组，目的是为了对每个组内的数据进行进一步操作。例如，在员工信息表中按部门分组，将所有属于同一个部门的员工数据归为一组。</li>
<li><strong>聚合查询</strong>：更强调对数据进行统计和计算，通过使用聚合函数（如 COUNT、SUM、AVG、MAX、MIN 等）来得到一个汇总结果。它可以基于分组后的数据进行计算，也可以对整个数据集进行计算，不一定要进行分组操作。比如计算所有员工的工资总和，这就是一个简单的聚合查询。</li>
</ul>
<h5>操作过程</h5>
<ul>
<li><strong>分组查询</strong>：
<ul>
<li>首先要明确分组字段，这是分组的依据。</li>
<li>然后可以对每个分组进行聚合操作，如统计每个组的记录数、计算每个组的平均值等。</li>
<li>例如，在一个学生成绩表中，按班级分组，然后统计每个班级的学生人数。</li>
</ul>
</li>
<li><strong>聚合查询</strong>：
<ul>
<li>可以直接对整个数据集使用聚合函数，不涉及分组步骤。例如计算所有学生的平均成绩。</li>
<li>也可以结合分组查询，先分组再对每个组进行聚合计算。比如按班级分组后，计算每个班级学生的平均成绩。</li>
</ul>
</li>
</ul>
<h5>结果呈现</h5>
<ul>
<li><strong>分组查询</strong>：结果通常是每个分组以及针对每个分组进行聚合操作后的结果，呈现出多个分组及其对应的统计信息。比如按部门分组后，会得到每个部门及其对应的员工数量、平均工资等信息。</li>
<li><strong>聚合查询</strong>：如果不进行分组，结果是一个单一的汇总值，如所有产品的销售总额。如果结合分组，结果类似于分组查询，是每个分组对应的聚合值。</li>
</ul>
<h5>在平台中的使用场景示例</h5>
<ul>
<li><strong>分组查询</strong>：当你需要分析不同类别数据的特征时，比如分析不同产品类别的销售情况，就可以按产品类别分组，然后统计每个类别的销售数量、销售额等。</li>
<li><strong>聚合查询</strong>：当你只需要一个整体的统计结果时，如计算公司所有员工的总工资，就可以直接使用聚合查询；当你需要对不同分组分别进行统计时，就结合分组查询一起使用。</li>
</ul>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>