<template>
<div ref='container' class='joker-demo-container'>
<h2>字段维护</h2>
<p>本章聚焦于在项目中添加和维护参数或属性的方法。“字段维护”功能作为 JOKER 开发平台中极为常用且关键的功能，是高效管理项目字段的重要手段。通过运用该功能，开发者能够精准、便捷地对项目中的各类字段进行配置与调整，从而确保项目数据的准确性和一致性。</p>
<h3>概述</h3>
<p>当我们面临为组件创建<strong>参数</strong>、<strong>响应数据</strong>、<strong>全局变量</strong>，或者为方法定义<strong>参数</strong>、<strong>返回类型</strong>等多种场景时，均可借助<strong>字段维护</strong>面板来完成字段的信息维护工作。</p>
<p><strong>字段维护</strong>面板集字段基本信息维护与类型设计功能于一体。它不仅可以帮助我们详细设置字段的各项基础属性，还能对字段的类型进行灵活设计，以满足不同项目的多样化需求。</p>
<p>这里我们来讲解一下参数属性的编辑面板的操作流程。（属性和参数的创建面板基本一致，只是存在部分属性的差异，在讲解时我们会特别标注，请仔细阅读。）</p>
<h3>第一步（属性基本信息）</h3>
<p><img src="/workbench/component-data8.png" alt=""></p>
<ul>
<li><strong>属性名称</strong>：需使用英文字母完成属性名的配置，且属性名在当前组件功能中要保持唯一（即在传入同类数据中唯一）。</li>
<li><strong>备注/标题</strong>：可为其配置一个标题，该标题有助于我们更快速地了解属性的用途，例如“颜色”“尺寸”等。</li>
<li><strong>提示</strong>：可通过提示属性配置当前属性的详细描述，使用时鼠标移入即可查看该属性的详细说明。</li>
<li><strong>分类</strong>：<strong>仅参数需要配置</strong>，可在此配置参数的分类，相同分类在组件属性展示时会进行分组归类，提升使用者的体验。
<img src="/workbench/component-data9.png" alt=""></li>
<li><strong>排序</strong>：可用于将属性进行排序，值越大在属性面板中越靠前（仅针对输入参数）</li>
</ul>
<h3>第二步（属性类型信息）</h3>
<p><img src="/workbench/component-data10.png" alt=""></p>
<ul>
<li><strong>类型</strong>：当前属性的类型，以下为您详细介绍各类型及其适用场景：
<ol>
<li><strong>字符串</strong>（<code>String</code>）：用于表示文本数据，例如姓名、地址、描述信息等，像 <code>&quot;John Doe&quot;</code>、<code>&quot;123 Main St&quot;</code> 这类内容就适合用字符串类型存储。</li>
<li><strong>数字</strong>（<code>Number</code>）：用于存储数值，可表示整数或小数，如年龄、价格、数量等，像 <code>25</code>、<code>9.99</code> 都属于数字类型。</li>
<li><strong>布尔值</strong>（<code>Boolean</code>）：只有两个可能的值，即 <code>true</code> 或 <code>false</code>，常用于表示开关状态、逻辑判断结果等，例如判断用户是否已登录，若登录则为 <code>true</code>，未登录则为 <code>false</code>。</li>
<li><strong>数组</strong>（<code>Array</code>）：用于存储多个值的有序集合，这些值可以是不同类型。例如存储多个用户姓名的数组 <code>[&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;]</code>，或者存储混合类型数据的数组 <code>[1, &quot;apple&quot;, true]</code>。</li>
<li><strong>对象</strong>（<code>Object</code>）：用于存储键值对的集合，可将相关的数据组织在一起。例如一个用户对象可能包含姓名、年龄、邮箱等信息：<code>{ name: &quot;John&quot;, age: 30, email: &quot;john@example.com&quot; }</code>。</li>
<li><strong>方法</strong>（<code>Function</code>）：表示一段可重复调用的代码块，用于实现特定的功能。例如一个计算两个数之和的方法：<code>function add(a, b) { return a + b; }</code>。</li>
<li><strong>时间</strong>（<code>Date</code>）：用于处理日期和时间信息，可进行日期的创建、比较、格式化等操作。例如创建一个表示当前时间的日期对象：<code>new Date()</code>。</li>
<li><strong>文件</strong>（<code>File</code>）：仅在服务端项目中存在，用于接收客户端上传的文件，如图片、文档等。</li>
<li><strong>任意类型</strong>（<code>Any</code>）：表示该属性可以是任意类型的数据，当您无法确定属性具体类型，或者希望属性具有灵活性时，可以使用此类型。</li>
</ol>
</li>
<li><strong>是否非空</strong>：可配置当前值是否允许为空（<code>undefined</code>）。</li>
<li><strong>赋值方式</strong>：<strong>仅参数需要配置</strong>，当需要为其设置值时，可通过该属性决定采用何种交互方式赋值。不同的数据类型有不同的赋值方式可选。
<ol>
<li><strong>可选值</strong>：可创建 Key - Value 的数据，提供下拉框模式的值选择。</li>
<li><strong>多行文本</strong>：采用长文本输入框，可实现多行文本的输入。</li>
<li><strong>颜色值</strong>：展现为颜色设置控件，可快速完成颜色的配置。</li>
<li><strong>CSS 尺寸值</strong>：可在此配置 CSS 的尺寸值（带单位）。</li>
<li><strong>样式名</strong>：展示为样式设置控件，可快速查询当前项目中的公开样式，实现快速添加。</li>
<li><strong>图片资源选择</strong>：提供内部静态资源的快速选择交互（图片展示效果）。</li>
<li><strong>资源选择</strong>：提供内部静态资源的快速选择交互。</li>
<li><strong>Style 样式</strong>：展现一个可视化的 Style 配置面板，可完成一些常用的样式编辑。</li>
<li><strong>表达式</strong>：默认使用表达式（动态脚本）进行过值配置。</li>
</ol>
</li>
<li><strong>默认值</strong>：作为参数/属性的默认值，若未配置或未传递值（参数）时，会自动赋值为该默认值。</li>
<li><strong>演示值</strong>：<strong>仅参数需要配置</strong>，该属性用于当组件被引入时，为该属性立即设置一个值，通过演示值可帮助开发人员在引入组件时有更好的首次展示效果，开发人员可对其修改。</li>
</ul>
<p>若当前属性类型被配置为：<code>数组/对象</code>时，会在第二步展现深层类型设计面板，可在此配置对象或数组的内部属性类型。</p>
<p><img src="/workbench/component-data11.png" alt=""></p>
<h4>属性校验</h4>
<p>属性校验仅在服务端控制器中为 API 接口做输入参数的校验判断。</p>
<p>在<strong>字段维护</strong>编辑窗口的第二步，通过选择不同的数据类型，能够配置各异的字段限制规则。
<img src="/workbench/server-controller1.png" alt=""></p>
<p>以下是不考虑数据类型时，所有的校验规则介绍：</p>
<ol>
<li><strong>正则校验</strong>：允许自定义正则表达式，以此约束输入参数的内容。</li>
<li><strong>是否为邮箱</strong>：用于验证输入内容是否为邮箱格式。</li>
<li><strong>是否为电话</strong>：判断输入内容是否符合电话格式。</li>
<li><strong>只限字母</strong>：确保输入内容仅包含字母。</li>
<li><strong>只限字母和数字</strong>：限定输入内容只能是字母和数字。</li>
<li><strong>只限数字</strong>：仅允许输入数字（字符串类型数字）。若该字段本身即为数字类型，可直接更改字段类型；此规则仅为字符串类型提供数字格式的校验补充。</li>
<li><strong>是否是整数</strong>：要求输入必须是整数，不允许为浮点数。</li>
<li><strong>包含特定内容</strong>：字符串中必须包含特定的内容。</li>
<li><strong>限制值范围</strong>：对值的范围进行限制。例如性别只能是男/女，支持手动维护枚举值，也可选择数据表内的枚举值。
<img src="/workbench/server-controller2.png" alt=""></li>
<li><strong>长度限制</strong>：对字符串长度进行限制，可单独配置最大值或最小值，也能同时组合限制。</li>
<li><strong>最大值</strong>：针对数字类型的字段，可配置最大值限制。</li>
<li><strong>最小值</strong>：针对数字类型的字段，可配置最小值限制。</li>
<li><strong>文件大小限制</strong>：当字段类型为<strong>File</strong>文件时，可通过此约束来限定上传文件的大小。</li>
<li><strong>文件数量限制</strong>：当字段类型为<strong>File</strong>文件时，可限制文件的最大上传数量，默认仅允许上传 1 个文件。</li>
<li><strong>文件类型限制</strong>：当字段类型为<strong>File</strong>文件时，可限制上传文件的接收类型，支持通配符。例如：图片(image/jpeg,image/*)支持“*”通配符，若需限制多个类型，可用“,”进行分割。</li>
</ol>
<h3>快速导入字段</h3>
<p>为了避免重复填写字段内容，平台提供了<strong>字段导入</strong>功能，该功能允许我们将项目中已存在资源里的变量/属性，通过快速导入的方式进行快速声明。</p>
<p><img src="/workbench/property.png" alt=""></p>
<p>我们可以在任意<strong>字段维护</strong>面板的第一步中，点击<code>从现有资产中导入字段</code>，从而打开字段快速选择窗口。</p>
<p><img src="/workbench/property1.png" alt=""></p>
<p>我们可以在此选择多个想要快速添加的字段，然后点击“确定”按钮，即可实现字段的快速添加。</p>
<blockquote>
<p><strong>字段导入</strong>功能在操作时，仅以复制的方式进行字段的快速信息声明，它不会对原始数据进行绑定，导入的字段也不会随着原变量的变更而变更。</p>
</blockquote>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>