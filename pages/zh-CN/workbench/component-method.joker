<template>
<div ref='container' class='joker-demo-container'>
<h2>组件方法</h2>
<p>本章着重介绍组件方法的创建与维护。</p>
<h3>概述</h3>
<p>除了在组件的生命周期函数中维护逻辑，平台还赋予开发人员创建组件方法的能力。通过将公共业务逻辑创建为组件内的方法，有助于更高效地维护组件。将这些方法对外公开后，还能实现从外部调用组件内部方法，这是实现高级复杂组件的关键操作流程。</p>
<h3>如何创建/编辑方法</h3>
<p>在 <code>组件数据</code> 面板的 <code>逻辑事件 - 组件方法</code> 处，能够添加和维护组件方法。</p>
<p><img src="/workbench/component-method.png" alt=""></p>
<p>打开方法创建面板后，平台要求填写以下方法相关数据：</p>
<p><img src="/workbench/component-method2.png" alt=""></p>
<ul>
<li><strong>方法名称</strong>：需填写方法的名称，要求使用英文字母，且在当前组件内具有唯一性。</li>
<li><strong>备注/标题</strong>：可为方法起一个别名，以便快速了解该方法的用途与含义。</li>
<li><strong>注释说明</strong>：在此配置方法的注释，当使用该方法时，鼠标移入可展示更多关于此方法的介绍。</li>
<li><strong>是否公开</strong>：若配置为公开方法，便允许外部调用，详细内容可参考后续小节。</li>
<li><strong>异步函数</strong>：若标记为异步函数，该方法将使用 <code>async</code> 修饰。平台在逻辑编排保存时，会自动判断是否包含异步处理，并对异步函数的修复提供提示。当然，也可在此手动标记该方法的异步标识。</li>
<li><strong>参数声明</strong>：在参数声明区域可添加方法参数，参数声明可参考：<a href="/workbench/property" target="_blank">字段维护</a>。</li>
<li><strong>返回类型</strong>：可在此定义当前方法的返回值类型。</li>
</ul>
<h3>如何使用方法</h3>
<p>我们将从两个角度去介绍如何使用组件方法：</p>
<h4>内部使用</h4>
<p>在页面布局中，可通过组件参数（表达式）的方式来使用组件方法。
<img src="/workbench/component-method3.png" alt=""></p>
<p>在逻辑编排过程中，既能够通过表达式（代码）的方式调用内部方法，也可以借助“内部方法调用”来实现对组件内部方法的调用：</p>
<ol>
<li><strong>在代码表达式中</strong>：通过<code>this.</code>的方式进行调用。
<img src="/workbench/component-method4.png" alt=""></li>
<li><strong>借助“内部方法调用”节点</strong>：将“内部方法调用”节点拖至逻辑编排画布中，通过下拉框选择要调用的方法。此处会展示所有可调用的方法，其中就包含组件内部的方法。采用这种调用方式的优势在于，能以可视化的形式，实现快速的方法调用，同时还提供了可视化的参数配置。
<img src="/workbench/component-method5.png" alt=""></li>
</ol>
<h4>外部调用</h4>
<p>外部调用要求我们为组件配置<strong>ref（组件标识）</strong>，详细内容可参考<a href="/workbench/component-layout" target="_blank">组件布局</a>。下面我们来了解一下如何使用组件提供的公开发方法。</p>
<p><img src="/workbench/component5.png" alt="公开方法调用演示截图"></p>
<p>图中展示的所有可调用方法均为组件内的公开方法，未公开的方法不会在此处显示。</p>
<blockquote>
<p>逻辑编排教程请查看：<a href="/workbench/workflow" target="_blank">逻辑编排</a></p>
</blockquote>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>