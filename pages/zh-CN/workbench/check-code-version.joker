<template>
<div ref='container' class='joker-demo-container'>
<h2>代码检查及版本发布</h2>
<p>本章着重介绍平台的代码检查能力，以及在版本发布过程中如何完整地进行代码检查。</p>
<h3>概述</h3>
<p>在平台底部的<code>仓库状态</code>区域，点击<code>问题面板</code>，即可打开仓库问题面板。在此面板中，开发人员能够快速查看当前项目所存在的问题，并依据问题描述及优化建议，迅速解决相应问题。
<img src="/workbench/check-code-version.png" alt=""></p>
<p>平台运用实时扫描机制，在开发过程中，会实时针对变更的代码进行检查，旨在第一时间告知开发人员发现的异常情况。同时，通过颜色变化来直观呈现当前项目的健康程度：</p>
<ul>
<li><strong>黄色</strong>：表示存在警告异常，此类异常属于非阻塞类，例如出现空方法、命名不规范等情况。虽然不会阻碍项目的运行，但可能会影响代码的可读性与可维护性，需要开发人员关注并适时优化。</li>
<li><strong>红色</strong>：意味着存在严重阻塞异常，通常是代码错误或类型错误，像变量不存在、组件不存在、变量类型不符合要求等问题。这类异常会导致项目无法正常运行，必须及时修复。</li>
<li><strong>蓝色</strong>：代表在开发中的代码未检测到异常，表明当前代码处于较为健康的状态，开发过程进展顺利。</li>
</ul>
<blockquote>
<p><strong>特别说明</strong>：平台仅对正在编辑的文件资源进行代码检查，并非实时对全量代码进行检查。这样做是为了在保证及时发现代码问题的同时，确保开发过程的流畅性，避免因大量代码检查而造成开发卡顿。</p>
</blockquote>
<h3>查看问题</h3>
<p>点击 <code>问题面板</code>，即可打开相应界面，其中展示的是当前仓库所发现的问题。</p>
<p><img src="/workbench/check-code-version2.png" alt="问题面板截图"></p>
<p>这里的问题分为两类：</p>
<ul>
<li><strong>错误</strong>：此类问题较为严重，可能导致程序无法正常运行或出现逻辑错误。</li>
<li><strong>警告</strong>：虽然不会使程序直接崩溃，但可能暗示代码存在潜在风险或不规范之处，需要引起关注。</li>
</ul>
<p>针对部分异常情况，平台会依据实际场景提供 <code>自动修复功能</code>。若存在可自动修复的问题，当点击问题条目时，系统会弹出提醒询问是否进行自动修复。此外，直接点击问题条目，平台便会自动定位到问题在代码中的来源位置，方便开发人员快速查找并解决问题。</p>
<h3>全量问题扫描</h3>
<p>若需要对当前仓库的所有文件进行全量扫描，可在 <code>问题面板</code> 中点击右上角的 <code>全文件检查</code> 按钮，以此触发全文件问题检查功能。该功能会对仓库内的所有文件进行全面细致的代码检查，帮助开发者更全面地了解项目中存在的问题。</p>
<p><img src="/workbench/check-code-version3.png" alt="全文件检查按钮截图"></p>
<h3>版本发布</h3>
<p>当触发<code>创建发行版</code>流程后，首要步骤是完成代码检查工作（可参考<a href="/portal/rep-version" target="_blank">创建版本帮助文档</a>）。在进入工作台时，平台会自动引导我们开展代码检查。</p>
<p><img src="/portal/rep-version4.png" alt="版本发布引导截图"></p>
<p>我们必须修复所有发现的问题，之后点击绿色按钮，即可完成代码检查工作，为后续的版本发布做好准备。</p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>