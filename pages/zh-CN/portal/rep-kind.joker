<template>
<div ref='container' class='joker-demo-container'>
<h2>仓库类型</h2>
<p>本章聚焦于阐述不同仓库类型之间的差异及其适用场景。</p>
<p>JOKER 智能开发平台遵循前后端分离的开发模式，这一模式赋予开发人员更大的灵活性。他们既能够独立完成前端项目的可视化快速开发，也能实现服务端项目的快速可视化开发。同时，即便前后端开发处于同一团队，平台也提供了 API 快速关联功能，确保前后端实现无缝同步。</p>
<h3>前端</h3>
<p>前端项目通常指可在终端运行的项目、组件或方法相关项目。</p>
<h4>分类</h4>
<p>前端项目可细分为应用、UI 组件、方法集这三种类型。</p>
<ol>
<li>
<p><strong>应用</strong>：应用类仓库主要用于存储最终面向用户运行的项目。当你着手创建如<code>抽奖应用</code>、<code>表单收集应用</code>、<code>商城应用</code>这类实际投入使用的项目时，就应选择<code>应用</code>分类。在此类仓库中，你可以创建<code>组件</code>、<code>方法集</code>、<code>页面</code>、<code>接口</code>等多种资源，以全方位满足项目运行的各类需求。
<img src="/portal/rep-kind.png" alt=""></p>
</li>
<li>
<p><strong>组件库</strong>：组件库旨在对外提供一套完整的 UI 组件库。若选择此类仓库，在工作台中可创建<code>组件</code>、<code>方法集</code>、<code>样式变量/公共样式</code>等资源，这有利于对 UI 相关资源进行集中管理与复用。
<img src="/portal/rep-kind2.png" alt=""></p>
</li>
<li>
<p><strong>方法集</strong>：方法集一般无法独立部署，它主要作为一个方法集合与类库存在，目的是对外提供公共方法调用。选择此分类的仓库后，在工作台中仅能创建<code>方法</code>类型的资源。
<img src="/portal/rep-kind3.png" alt=""></p>
</li>
</ol>
<blockquote>
<p><strong>特别说明</strong>：除<code>应用</code>类型的仓库外，UI 组件库和方法集在完成版本发布后，允许被其他仓库<strong>引用</strong>。当应用项目<strong>引用</strong>了组件库或方法集项目后，即可调用其中的组件或方法。而<code>应用</code>类型的仓库不允许被引用，不过在版本发布后，它可作为项目模板被克隆，以便进行二次开发。</p>
</blockquote>
<h4>运行平台</h4>
<p>在此处配置当前仓库的运行平台，目前可选项为<strong>PC 端</strong>、<strong>移动端</strong>和<strong>不限</strong>。根据项目实际运行环境进行准确选择，有助于优化项目在不同平台上的运行效果。</p>
<blockquote>
<p>如果你想要开发可以在 PC 端和移动端都可以自适应运行的应用是，可以选择<strong>不限</strong>。</p>
</blockquote>
<blockquote>
<p>请谨慎选择运行平台，运行平台会影响工作台中面板的展示，也会影响工作台中扩展市场的推荐和筛选。</p>
</blockquote>
<h3>服务端</h3>
<ol>
<li>
<p><strong>应用</strong>：应用类仓库主要用于存储最终面向用户运行的项目。当你着手创建如<code>抽奖应用</code>、<code>表单收集应用</code>、<code>商城应用</code>这类实际投入使用的项目时，就应选择<code>应用</code>分类。在此类仓库中，你可以创建<code>控制器</code>、<code>数据库</code>、<code>缓存</code>、<code>方法集</code>等多种资源，以全方位满足项目运行的各类需求。
<img src="/portal/rep-kind4.png" alt=""></p>
</li>
<li>
<p><strong>方法集</strong>：方法集一般无法独立部署，它主要作为一个方法集合与类库存在，目的是对外提供公共方法调用。选择此分类的仓库后，在工作台中仅能创建<code>方法</code>类型的资源。
<img src="/portal/rep-kind3.png" alt=""></p>
</li>
</ol>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>