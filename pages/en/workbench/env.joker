<template>
<div ref='container' class='joker-demo-container'>
<h2>Environment Variables</h2>
<p>This chapter introduces the environment variable-related functionalities in <code>application</code> type projects.</p>
<h3>Overview</h3>
<p>In application-type projects, the platform allows us to implement multi-environment business/runtime differences through environment variables.<br>
We can manage the project's environment variables in the <strong>Environment Variables</strong> file in the root directory.<br>
<img src="/workbench/env.png" alt=""></p>
<ul>
<li><strong>Environment Variables</strong>: In this file, we can create environment variables and assign different values to them across different environments.</li>
<li><strong>Environments</strong>: We can create multiple environments based on requirements, each with distinct configurations for environment variables. Common environments include:
<ul>
<li><strong>DEV (Development Environment)</strong>: The daily coding and debugging environment for developers, emphasizing convenience for rapid iteration and code modifications. It often differs significantly from production environments.</li>
<li><strong>IT (Integration Testing Environment)</strong>: Used for integration testing of multiple components or modules, verifying interactions and ensuring stability between subsystems.</li>
<li><strong>SIT (System Integration Testing Environment)</strong>: Conducts full-system integration testing, validating performance, compatibility, and interactions with external systems to ensure alignment with business needs.</li>
<li><strong>UAT (User Acceptance Testing Environment)</strong>: Allows end-users or clients to perform acceptance testing before deployment, verifying that the system meets business requirements and expectations.</li>
<li><strong>STAGING (Pre-Production Environment)</strong>: Also known as the gray environment, closely mirroring production configurations and data, used for final validation before release to minimize risks.</li>
<li><strong>QA (Quality Assurance Environment)</strong>: A dedicated environment for QA teams to perform functional, performance, and security testing under diverse scenarios.</li>
<li><strong>PROD (Production Environment)</strong>: The live environment serving end-users, demanding high stability, reliability, and security.</li>
</ul>
</li>
</ul>
<h3>Default Variables</h3>
<p>The platform provides essential environment variables, which cannot be deleted. Below we explain the default variables for <strong>frontend</strong> and <strong>backend</strong> projects.</p>
<h4>Frontend Projects</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Configuration</th>
<th>Meaning</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>requesterRoot</code></td>
<td>Request Base URL</td>
<td>Configures the request address. The final request URL combines the <code>requesterRoot</code> and <code>API endpoint</code> (format: <code>requesterRoot</code>/<code>API endpoint</code>).</td>
</tr>
<tr>
<td><code>enableRequesterMock</code></td>
<td>Enable Request Mock</td>
<td>Determines whether mock responses are used instead of real API calls. Values: <code>true</code> (default, enables mocking), <code>false</code> (disables mocking).</td>
</tr>
<tr>
<td><code>routerRoot</code></td>
<td>Routing Base Path</td>
<td>Configures the base path for routing. Refer to the <a href="https://front.jokers.pub/router/init" target="_blank">Routing documentation</a> for details on the <strong>base</strong> routing configuration.</td>
</tr>
</tbody>
</table>
<h4>Backend Projects</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Configuration</th>
<th>Meaning</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SERVER_NAME</code></td>
<td>Service Name</td>
<td>Identifies the service in clustered deployments for log differentiation.</td>
</tr>
<tr>
<td><code>PORT</code></td>
<td>Service Port</td>
<td>The port the service runs on (default: <code>8000</code>). Adjust to avoid conflicts or meet network requirements.</td>
</tr>
<tr>
<td><code>HOST</code></td>
<td>Service Host</td>
<td>The base address of the service (default: <code>localhost</code>).</td>
</tr>
<tr>
<td><code>UPLOAD_ROOT_DIR</code></td>
<td>File Upload Directory</td>
<td>The directory for storing uploaded files (default: <code>./upload</code>). Customize as needed.</td>
</tr>
<tr>
<td><code>STATIC_ROOT_DIR</code></td>
<td>Static Resources Directory</td>
<td>Serves static files (e.g., images, CSS, JS) directly from this directory.</td>
</tr>
<tr>
<td><code>AUTH_EXPIRES_IN</code></td>
<td>JWT Token Expiration</td>
<td>Sets the validity period for JWT tokens (e.g., <code>24h</code> for 24 hours, <code>3d</code> for 3 days; default: 4 days).</td>
</tr>
<tr>
<td><code>LOG_TYPE</code></td>
<td>Logging Type</td>
<td>Options: <code>Console</code> (real-time logs), <code>File</code> (file-based logging with rotation), or <code>MongoDb</code> (logs stored in MongoDB).</td>
</tr>
<tr>
<td><code>LOG_MONGODB_SERVER_PATH</code></td>
<td>MongoDB Log Server Address</td>
<td>Required if <code>LOG_TYPE</code> is <code>MongoDb</code>. Specifies the MongoDB connection for logs.</td>
</tr>
<tr>
<td><code>CACHE_TYPE</code></td>
<td>Cache Type</td>
<td>Options: <code>Memory</code> (volatile, fast) or <code>Redis</code> (persistent, distributed; default: <code>Memory</code>).</td>
</tr>
<tr>
<td><code>CACHE_REDIS_SERVER_PATH</code></td>
<td>Redis Cache Server Address</td>
<td>Required if <code>CACHE_TYPE</code> is <code>Redis</code>. Specifies the Redis connection.</td>
</tr>
<tr>
<td><code>DB_SERVER_URL</code></td>
<td>Database Connection URL</td>
<td>Configures the database endpoint for data operations.</td>
</tr>
</tbody>
</table>
<h3>Creating Variables</h3>
<p><img src="/workbench/env1.png" alt="Environment Configuration Interface"></p>
<p>Click the <strong>Create Environment Variable</strong> button at the bottom of the <code>Environment Configuration</code> file to create a variable.</p>
<p><img src="/workbench/env2.png" alt="Creating an Environment Variable"></p>
<h4>Variable Configuration Fields</h4>
<ul>
<li><strong>Variable Name</strong>: The name of the environment variable.
<ul>
<li>Frontend: Use camelCase (e.g., <code>apiBaseUrl</code>).</li>
<li>Backend: Use UPPER_SNAKE_CASE (e.g., <code>API_BASE_URL</code>).</li>
</ul>
</li>
<li><strong>Title</strong>: A human-readable label for quick reference.</li>
<li><strong>Description/Note</strong>: Detailed usage instructions.</li>
<li><strong>Variable Group</strong>: Organize variables into groups for easier management.</li>
<li><strong>Allowed Values</strong>: Specify possible values (press Enter to add multiple).</li>
</ul>
<h3>Creating Environments</h3>
<p>Click <strong>Create Environment</strong> in the top-right corner of the <code>Environment Configuration</code> file to add a new environment.</p>
<p><img src="/workbench/env3.png" alt=""></p>
<p>Once created, an environment tab appears. Switch tabs to manage variables for each environment.</p>
<p><img src="/workbench/env4.png" alt=""></p>
<blockquote>
<p>The <strong>DEV</strong> environment is mandatory and cannot be deleted. It represents the default workspace for development.</p>
</blockquote>
<h3>Using Environment Variables</h3>
<p>In <strong>frontend projects</strong>, access variables via <code>import.meta.define.*</code>:<br>
<img src="/workbench/env5.png" alt=""></p>
<p>In <strong>backend projects</strong>, use <code>process.env.*</code>:<br>
<img src="/workbench/env6.png" alt=""></p>
<h3>Environment Switching</h3>
<p>Two methods exist for switching environments:</p>
<h4>1. Debug Execution</h4>
<p>Select the environment during <a href="/workbench/debugger" target="_blank">runtime debugging</a>:<br>
<img src="/workbench/env7.png" alt=""></p>
<h4>2. Code Export</h4>
<p>During export, environment-specific configurations are generated in the root directory, with run commands in <code>package.json</code>:<br>
<img src="/workbench/env8.png" alt=""></p>
<h3>Data Security</h3>
<p>The platform enforces strict security for environment configuration files:</p>
<ul>
<li>For <strong>public projects</strong>, variable values are masked to prevent exposure.</li>
<li>During project cloning, sensitive data is <strong>anonymized</strong> to ensure protection.</li>
</ul>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>