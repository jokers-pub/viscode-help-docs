<template>
<div ref='container' class='joker-demo-container'>
<h2>Base Components</h2>
<p>This chapter introduces the foundational layout components provided by the platform.</p>
<p><img src="/workbench/component-base.png" alt=""></p>
<h3>Text</h3>
<p><img src="/workbench/component-base2.png" alt="">
A <strong>Text Node</strong> enables you to display text anywhere in the canvas. You may configure the display value using either <strong>static text</strong> or <strong>dynamic expressions</strong>.<br>
Key properties:</p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Defines a <code>ref</code> used to obtain the virtual node in code and perform programmatic operations.</td>
</tr>
<tr>
<td>Text Content</td>
<td>String</td>
<td>The value to render—supply a static string or an expression for dynamic rendering.</td>
</tr>
<tr>
<td>Custom Style Class</td>
<td>Array</td>
<td>Accepts an array of CSS class names to be applied to the node.</td>
</tr>
<tr>
<td>Custom Styles</td>
<td>Object</td>
<td>Edited through the visual style editor; maps to the node’s inline <code>style</code>.</td>
</tr>
</tbody>
</table>
<hr>
<h3>Element</h3>
<p>The <strong>Element Node</strong> is the most frequently used layout primitive. Drop an element and change its <code>tagName</code> to render any <strong>DOM</strong> element; defaults to <strong>DIV</strong>.<br>
It exposes:</p>
<ul>
<li>Custom attributes</li>
<li>Custom element events<br>
This lets you model any DOM node—div, i, input, etc.—without restrictions.</li>
</ul>
<p><img src="/workbench/component-base3.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Defines a <code>ref</code> used within logic to reference and manipulate the virtual node.</td>
</tr>
<tr>
<td>Tag Name</td>
<td>String</td>
<td>Controls the rendered element type; defaults to <code>div</code>.</td>
</tr>
<tr>
<td>Custom Style Class</td>
<td>Array</td>
<td>CSS class names array for the element.</td>
</tr>
<tr>
<td>Inline Style</td>
<td>Object</td>
<td>Visual style editor maps to the element’s inline styles.</td>
</tr>
<tr>
<td>Custom Attributes</td>
<td>String</td>
<td>Arbitrary HTML attributes can be added, edited, or removed after creation.</td>
</tr>
</tbody>
</table>
<h4>Section</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Slot</th>
<th>Label</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>default</td>
<td>Content</td>
<td>Container’s content slot; supports nested elements for hierarchical composition.</td>
</tr>
</tbody>
</table>
<h4>Events</h4>
<p>Developers may attach custom DOM events to the node.</p>
<p><video width="80%" controls autoplay muted loop><source src="/workbench/component-base4.mp4" type="video/mp4">你的浏览器不支持视频播放。</video></p>
<hr>
<h3>Button</h3>
<p>A lightweight <strong>Button</strong> component for rapid click interactions.</p>
<p><img src="/workbench/component-base5.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Assigns a <code>ref</code> for programmatic access.</td>
</tr>
<tr>
<td>Button Content</td>
<td>String</td>
<td>Static text or expression-driven dynamic text displayed on the button.</td>
</tr>
<tr>
<td>Custom Style Class</td>
<td>Array</td>
<td>CSS classes.</td>
</tr>
<tr>
<td>Button Style</td>
<td>Object</td>
<td>Inline styles edited with the visual style editor.</td>
</tr>
</tbody>
</table>
<h4>Component Events</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Event</th>
<th>Meaning</th>
<th>Params</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>click</td>
<td>Mouse-click</td>
<td>—</td>
<td>Fired after both <code>mousedown</code> and <code>mouseup</code> complete on the same element (or their least-common ancestor).</td>
</tr>
<tr>
<td>mouseenter</td>
<td>Pointer enters</td>
<td>—</td>
<td>Triggered when the pointing device enters the component bounds. Usually paired with <code>mouseleave</code>.</td>
</tr>
<tr>
<td>mouseleave</td>
<td>Pointer exits</td>
<td>—</td>
<td>Triggered when the pointer leaves the component bounds. Usually paired with <code>mouseenter</code>.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>The built-in Button is intentionally minimal—for complex logic or styling, wrap your own button via the <strong>Element</strong> node or integrate a third-party UI kit.</p>
</blockquote>
<hr>
<h3>Conditional Rendering</h3>
<p>Controls the visibility of DOM fragments.</p>
<p><img src="/workbench/component-base4.png" alt=""></p>
<p>Define a <strong>primary condition</strong> and optionally add <code>else if</code> / <code>else</code> branches. The panel auto-creates matching condition branches in the outline tree, where you can nest child elements accordingly.</p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Condition</td>
<td>Boolean</td>
<td>When truthy, renders the wrapped elements; falsy hides them. Use expressions to model sophisticated logic.</td>
</tr>
</tbody>
</table>
<p>Example: wrapping a <code>button</code> inside a condition toggles its visibility based on the expression value.<br>
<video width="80%" controls autoplay muted loop><source src="/workbench/component-base6.mp4" type="video/mp4">你的浏览器不支持视频播放。</video></p>
<blockquote>
<p>Conditional nodes are <em>directive</em> elements; once populated, clicking them on the canvas selects their children instead. Use the outline tree to select the directive itself.</p>
</blockquote>
<hr>
<h3>Loop</h3>
<p>Renders repeated data (lists or objects) dynamically.</p>
<p><img src="/workbench/component-base7.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loop Source</td>
<td>Array/Object</td>
<td>The dataset to iterate over.</td>
</tr>
<tr>
<td>Item Name</td>
<td>String</td>
<td>Identifier for the current loop item—accessible as an expression variable inside the loop.</td>
</tr>
<tr>
<td>Index Name</td>
<td>String</td>
<td>Identifier for the index/key variable: array index for arrays, object key for objects.</td>
</tr>
</tbody>
</table>
<h4>Using Loop Variables</h4>
<p>After declaring Item Name and Index Name, reference them inside the loop scope via expressions.</p>
<p><img src="/workbench/component-base8.png" alt=""></p>
<p>Illustrates referencing an <code>item</code> variable inside an icon component nested in the loop.</p>
<hr>
<h3>Dynamic Component</h3>
<p>Much like the <strong>Element</strong> node, but purpose-built for <em>runtime tag selection</em>. You supply tag names at runtime to render third-party components, and you can define custom sections.</p>
<p><img src="/workbench/component-base9.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Assign <code>ref</code> for programmatic access.</td>
</tr>
<tr>
<td>Tag Name</td>
<td>String</td>
<td>The tag or component name to render.</td>
</tr>
<tr>
<td>Custom Attributes</td>
<td>String</td>
<td>Arbitrary attributes editable post-add.</td>
</tr>
</tbody>
</table>
<h4>Sections</h4>
<p>Dynamic components let you define custom <strong>slots/sections</strong> for content projection.</p>
<p><img src="/workbench/component-base10.png" alt=""></p>
<h4>Events</h4>
<p>Attach custom events to the dynamic node.</p>
<p><img src="/workbench/component-base11.png" alt=""></p>
<blockquote>
<p>Often leveraged to wrap NPM-based low-level libraries into visually-declarative components.</p>
</blockquote>
<hr>
<h3>Render Slot</h3>
<p>Available <strong>only</strong> in a <em>Component</em> type file. Marks a region within a component that can be injected dynamically by consumers.</p>
<p><img src="/workbench/component-base12.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Default Slot</td>
<td>Boolean</td>
<td>When <code>true</code>, the slot appears open by default when the component is dropped onto the canvas, simplifying initial editing.</td>
</tr>
<tr>
<td>ID</td>
<td>String</td>
<td>Alphabetic identifier—defaults to <code>default</code>—used to distinguish multiple slots in one component.</td>
</tr>
<tr>
<td>Slot Description</td>
<td>String</td>
<td>Human readable guidance for developers consuming the component.</td>
</tr>
<tr>
<td>Slot Alias</td>
<td>String</td>
<td>A nickname for better tooltip/outliner readability.</td>
</tr>
<tr>
<td>Linked Components</td>
<td>Array</td>
<td>Pre-attach suggested children for quick drop-in usage.</td>
</tr>
<tr>
<td>Slot Parameters</td>
<td>Array</td>
<td>Define arguments to be passed from the host component into the dynamic slot content, enabling data-driven composition.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>For deeper slot mechanics, see <em>Component Sections</em>.</p>
</blockquote>
<p><video width="80%" controls autoplay muted loop><source src="/workbench/component-base13.mp4" type="video/mp4">你的浏览器不支持视频播放。</video></p>
<p>Demonstrates injecting an <code>Input</code> component with multiple <code>before/after</code> slots; toggling each slot in the consumer’s <em>Component Slots</em> panel renders exactly the intended additions or omissions.</p>
<hr>
<h3>Image</h3>
<p>Quickly renders a single image asset.</p>
<p><img src="/workbench/component-base14.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Assign <code>ref</code> for programmatic access.</td>
</tr>
<tr>
<td>Image Source</td>
<td>String</td>
<td>Bind static assets or dynamic URLs via expressions.</td>
</tr>
<tr>
<td>Custom Style Class</td>
<td>Array</td>
<td>CSS classes.</td>
</tr>
<tr>
<td>Inline Styles</td>
<td>Object</td>
<td>Styled via the visual editor.</td>
</tr>
</tbody>
</table>
<h4>Component Events</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Event</th>
<th>Meaning</th>
<th>Params</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>click</td>
<td>Click on the image</td>
<td>—</td>
<td>Event fires after mousedown + mouseup on the element or closest common ancestor.</td>
</tr>
<tr>
<td>load</td>
<td>Image loaded successfully</td>
<td>—</td>
<td>Executes when the image finishes loading. Ideal for hiding placeholders.</td>
</tr>
<tr>
<td>error</td>
<td>Image load failed</td>
<td>—</td>
<td>Executes if fetching the image fails. Useful for fallback behaviors.</td>
</tr>
</tbody>
</table>
<h4>Quick Asset Selection</h4>
<p><img src="/workbench/component-base15.png" alt=""></p>
<p>Upload images to the <strong>Resources</strong> folder in the <em>Asset Manager</em>, then pick them via the bind-in resource panel for drop-in usage.</p>
<hr>
<h3>HTML Renderer</h3>
<p>Outputs dynamic HTML fragments (e.g., news, comments) into a positioned slot.</p>
<p><img src="/workbench/component-base16.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Assigns a <code>ref</code> for programmatic access.</td>
</tr>
<tr>
<td>Content</td>
<td>String</td>
<td>HTML fragment, generally supplied via expressions.</td>
</tr>
<tr>
<td>Disable Sandbox</td>
<td>Boolean</td>
<td>Defaults to sandboxed iframe isolation. Toggle off to allow styles/scripts—use cautiously.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Prefer expressions for dynamic HTML. Static markup is better modeled via plain <strong>Element</strong> nodes.<br>
Keep sandbox <em>on</em> to avoid CSS/global leakage; disabling requires a canvas refresh.<br>
Always sanitize inputs to mitigate XSS; the node is not directly selectable on canvas—use the outliner.</p>
</blockquote>
<hr>
<h3>SVG Component</h3>
<p>SVG often contains deeply nested layers; building via plain nodes becomes unmanageable. This component accepts SVG source as a string.</p>
<p><img src="/workbench/component-base17.png" alt=""></p>
<h4>Component Attributes</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Attribute</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Component ID</td>
<td>String</td>
<td>Provide a <code>ref</code> for code-level interaction.</td>
</tr>
<tr>
<td>SVG Source</td>
<td>String</td>
<td>The raw SVG markup rendered by the component.</td>
</tr>
</tbody>
</table>
<hr>
<h3>Page Container</h3>
<p>Available only in <em>Page</em> files. Inserts a container whose content is driven by routing data—different routes render different child pages.</p>
<p><img src="/workbench/component-base18.png" alt=""></p>
<p>This grants deep, multi-level layout capabilities. See <a href="/workbench/page" target="_blank">Pages</a> for further reading.</p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>