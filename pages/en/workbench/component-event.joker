<template>
<div ref='container' class='joker-demo-container'>
<h2>Component Events</h2>
<p>This chapter covers everything you need to know about component events, focusing on three key areas: <strong>how to register component events</strong>, <strong>how to expose events externally</strong>, and <strong>how parameters are passed along with an event</strong>.</p>
<h3>Registering Component Parameters</h3>
<p>When a component is selected, switch to the <code>Events</code> tab in the component’s property panel to see all events that the component exposes. Simply choose the event you need and click <strong>Create Event</strong> to register it.</p>
<p><video width="80%" controls autoplay muted loop><source src="/workbench/component-event.mp4" type="video/mp4">你的浏览器不支持视频播放。</video></p>
<h3>Event Parameters</h3>
<p>There are two kinds of parameters:</p>
<ol>
<li>Parameters emitted <strong>by the component</strong>.</li>
<li>Parameters taken from the <strong>current context</strong>.</li>
</ol>
<h4>Parameters Emitted by the Component</h4>
<p>During event handling, the component that raises the event can transmit data to the outside world.<br>
For example, on a product-list page, when the user taps an item, the system dispatches an event whose payload contains the detailed product object.<br>
Inside the event handler you access this payload through the reserved variable <code>e.data</code>.</p>
<p><img src="/workbench/component-event1.png" alt="Component-emitted parameter"></p>
<p>Every component event handler receives an <strong>e</strong> object that carries the following members:</p>
<table class="mkd-table">
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>eventName</td>
<td>string</td>
<td>Name of the fired event.</td>
</tr>
<tr>
<td>event</td>
<td>object</td>
<td>The raw DOM or framework event object.</td>
</tr>
<tr>
<td>target</td>
<td>VNode</td>
<td>Virtual DOM node that triggered the event.</td>
</tr>
<tr>
<td>preventDefault</td>
<td>function</td>
<td>Call to suppress the event’s default behavior.</td>
</tr>
<tr>
<td>stopPropagation</td>
<td>function</td>
<td>Call to prevent bubbling/capturing further up the tree.</td>
</tr>
<tr>
<td>data</td>
<td>object</td>
<td>Externally declared data whose structure is determined by the component’s event signature.</td>
</tr>
</tbody>
</table>
<h4>Parameters from the Current Context</h4>
<p>When you register an event on a component <strong>within the current file</strong> and want to hand over data that lives in that same file, you switch to the second mode of parameter delivery.<br>
This pattern is common in list-rendering loops: while iterating with <code>for</code>, each item’s data is forwarded via the event handler even though those items are <strong>not stored inside the triggering component</strong> itself.</p>
<p><img src="/workbench/component-event2.png" alt="Context parameter"></p>
<p>After you add such parameters you’ll find them in the event-handler workflow panel.</p>
<p><img src="/workbench/component-event3.png" alt="Workflow panel with parameters"></p>
<blockquote>
<p>Parameters are bound <strong>positionally</strong>, similar to function arguments. You can drag them to reorder, ensuring they are delivered in the exact required order.</p>
</blockquote>
<h3>How to Expose Events for External Use</h3>
<p>While developing a component you can declare events that callers will be able to bind to.</p>
<h4>Defining Event Metadata</h4>
<p>Open <code>Component Data ➞ Logic/Events</code>. Click the <strong>+</strong> icon beside <strong>Exposed Events</strong>.</p>
<p><img src="/workbench/component-event4.png" alt="Declare exposed event UI"></p>
<p>To add or edit an event the <code>Trigger Event</code> dialog appears.</p>
<p><img src="/workbench/component-event5.png" alt="Trigger Event dialog"></p>
<p>Fill out the dialog as follows:</p>
<ol>
<li><strong>Event Name</strong> – an English identifier used in code to raise the event.</li>
<li><strong>Display Title</strong> – a friendly label developers see in the IDE to quickly grasp its purpose.</li>
<li><strong>Description</strong> – a concise yet complete explanation of when the event fires, what it achieves, and any edge-cases.</li>
<li><strong>Event Parameters</strong> – describe the expected schema; leave empty when no payload is required.</li>
</ol>
<h4>Raising the Event</h4>
<p>Once the event is declared, the <strong>Trigger Event</strong> node becomes available inside the component’s logic graph.</p>
<p><img src="/workbench/component-event6.png" alt="Trigger Event node usage"></p>
<p>Use the drop-down to pick the event. The platform enumerates all exposed events defined for this component.<br>
If the event schema contains parameters, the node surfaces input ports so you can map the corresponding values.</p>
<h3>Browsing Registered Event Handlers</h3>
<p>After you attach many interactive events across the page UI, you can quickly locate any handler inside <code>Component Data ➞ Logic/Events – Internal Events</code>. This panel lists <strong>every internally-declared handler</strong>. Click an event name to open the handler’s logic; press the <strong>Locate Component</strong> button to have the canvas jump to the source component – a huge productivity gain during debugging and maintenance.</p>
<p><img src="/workbench/component-event7.png" alt="Internal events browser"></p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>