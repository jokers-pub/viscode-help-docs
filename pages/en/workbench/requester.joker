<template>
<div ref='container' class='joker-demo-container'>
<h2>Request Management</h2>
<p>This chapter primarily explains how to manage API interfaces in front-end application projects and how to quickly implement requests through a visual approach.</p>
<h3>Overview</h3>
<p>The Request Management feature is only available in repositories of the <strong>Frontend - Application</strong> type. As an actual implementation project, it allows for the unified management and maintenance of API interfaces.</p>
<p>You can open this feature by clicking the <strong>Service Interfaces</strong> menu in the right-side panel.</p>
<p><img src="/workbench/requester.png" alt=""></p>
<h3>Create/Edit an Interface</h3>
<p>On the Request Management page, you can create a new service interface by clicking the <strong>New Interface</strong> button in the <strong>top-right corner</strong> or edit an existing one by clicking the <strong>Edit</strong> button in the interface list.</p>
<p><img src="/workbench/requester1.png" alt=""></p>
<p>When the interface editing window opens, the following elements need to be maintained:</p>
<p><img src="/workbench/requester2.png" alt=""></p>
<ol>
<li><strong>Interface URL</strong>: Enter the interface URL here. Do not include the domain name—the request base URL can be configured in environment variables.</li>
<li><strong>Request Type</strong>: Click the dropdown before the URL input field to switch the request type (currently supports <strong>POST</strong> and <strong>GET</strong>).</li>
<li><strong>Title</strong>: A brief title helps developers quickly understand the interface's purpose.</li>
<li><strong>Description</strong>: Detailed interface information to help developers gain a deeper understanding.</li>
<li><strong>Input Fields</strong>: Click <strong>Add Parameter</strong> or edit an existing input parameter.</li>
<li><strong>Output Fields</strong>: Click <strong>Add Parameter</strong> or edit an existing output parameter.</li>
</ol>
<blockquote>
<p>Once an interface is created, the platform automatically categorizes it based on the file hierarchy for better management.<br>
For multi-environment base URL configuration, refer to the <strong>requesterRoot</strong> variable in the <a href="/workbench/env" target="_blank">Environment Variables</a> documentation.</p>
</blockquote>
<h3>Import/Update</h3>
<p>The platform provides a quick interface import/update feature, allowing you to rapidly import all API interfaces from existing, accessible backend projects.</p>
<p><img src="/workbench/requester11.png" alt=""></p>
<p>Click the <strong>Import/Update</strong> button in the top-right corner to open the import panel. Enter the name of the backend repository to search for the target project.</p>
<p><img src="/workbench/requester12.png" alt=""></p>
<p>Only backend projects accessible to the current user will be displayed. After selecting a backend project, you can choose a version (e.g., the <strong>DEV</strong> development version).</p>
<p>Once selected, you can click <strong>Import/Update</strong> to import individual interfaces or controllers, or use the <strong>Sync All</strong> button to synchronize all backend interfaces.</p>
<blockquote>
<p>If the imported interface URL already exists, it will only update the input/output fields without modifying <strong>MOCK</strong> data. If the data structure changes, update the MOCK data promptly.</p>
</blockquote>
<h3>Interface Input</h3>
<p>Click <strong>Add Parameter</strong> to define input fields:</p>
<p><img src="/workbench/requester3.png" alt=""></p>
<p>For detailed field creation, refer to: <a href="/workbench/property" target="_blank">Field Maintenance</a></p>
<h3>Interface Output</h3>
<p>The output section defines the data structure returned by an interface. Click the <strong>Output</strong> tab to manage output fields.</p>
<p><img src="/workbench/requester4.png" alt=""></p>
<p>For detailed field creation, refer to: <a href="/workbench/property" target="_blank">Field Maintenance</a></p>
<p>Beyond manual field creation, the platform supports <strong>JSON auto-parsing</strong>. Simply paste a sample JSON response, and the system will automatically extract the fields.</p>
<p><video width="80%" controls autoplay muted loop><source src="/workbench/requester5.mp4" type="video/mp4">你的浏览器不支持视频播放。</video></p>
<h3>MOCK Data</h3>
<p>The JOKER development platform includes MOCK capabilities, enabling realistic test data generation using Mock.js syntax.</p>
<p><img src="/workbench/requester6.png" alt="Interface showing Mock syntax for test data generation"></p>
<p>In addition to Mock.js syntax, manual MOCK data customization is supported, along with <strong>conditional branching</strong> for advanced use cases.</p>
<p><img src="/workbench/requester7.png" alt="Interface for manual MOCK data and conditional branching"></p>
<blockquote>
<p>Condition-based MOCK data allows you to control data variability based on specific logic (e.g., simulating success/failure responses).</p>
</blockquote>
<h3>Global Request Management</h3>
<p>Click the <strong>Global Request Management</strong> tab in the request editor to configure:</p>
<p><img src="/workbench/requester8.png" alt="Screenshot of Global Request Management"></p>
<p>Key configurations:</p>
<ul>
<li><strong>Timeout</strong>: Default is 10s (override per request if needed).</li>
<li><strong>Data Transformation</strong>: Modify request/response formats to adapt to different backend standards.</li>
<li><strong>Status Validation</strong>: (Recommended) Define logic to distinguish between business success/failure. If unset, all non-network errors are treated as successes.</li>
<li><strong>Global Error Handling</strong>: (Recommended) Centralize error handling (e.g., showing error popups). Return <code>true</code> in the <code>Error</code> method to bypass this.</li>
<li><strong>Custom Configs</strong>: Add specialized options (e.g., enabling loading animations).</li>
<li><strong>Request Interceptors</strong>: Use pre/post/error hooks for tasks like displaying loading states.</li>
</ul>
<h3>How to Call an Interface</h3>
<p>After defining an interface, use the <strong>Data Request</strong> node in any method editor to invoke it:</p>
<p><img src="/workbench/requester9.png" alt=""></p>
<p>Customize request parameters during invocation:</p>
<p><img src="/workbench/requester10.png" alt=""></p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>