<template>
<div ref='container' class='joker-demo-container'>
<h2>Getting to Know the Workbench</h2>
<p>In this Section we’ll dive deep into the workbench—its definition, functional zones, and the specifics of each zone—to get you up to speed and productive immediately.</p>
<h3>Overview</h3>
<p>The workbench is a <strong>browser-based visual development platform</strong>. Inside any Repository you can perform code-first or visual development while seamlessly integrating:</p>
<ul>
<li>front-end <strong>Sections</strong>, pages, methods, APIs, and</li>
<li>back-end databases, caches, controllers (APIs), and configuration files.</li>
</ul>
<p>A powerful in-platform <strong>JavaScript/TypeScript expression editor</strong> allows you to compose sophisticated logic. A real-time linter continuously inspects code as you type, surfaces potential issues, and provides actionable fixes—cutting troubleshooting time and boosting throughput.</p>
<p><img src="/workbench/basic.png" alt=""></p>
<h3>Functional Areas</h3>
<p>Three principal zones divide the UI:</p>
<p><img src="/workbench/basic2.png" alt=""></p>
<ul>
<li><strong>Left Pane</strong> – Menu Panel: context-sensitive, displays tools relevant to the current project/file type.</li>
<li><strong>Center Pane</strong> – Workspace: the active visual editor region; its layout morphs to match the file type being edited.</li>
<li><strong>Bottom Pane</strong> – Project Info: shows errors, exceptions, file sizes, versions, and other diagnostics.</li>
</ul>
<hr>
<h3>Resource Explorer</h3>
<p><img src="/workbench/basic3.png" alt=""></p>
<p>The Resource Explorer presents directory tree navigation for the entire project. From here you can create, rename, delete, copy/paste, and reorder files or folders.</p>
<p>Hover any asset to reveal a three-dot action icon that opens the file operations menu.</p>
<h4>File Actions</h4>
<ul>
<li><strong>Create Folder</strong> – Appears only on folders; creates a subfolder to keep assets organized and ensure a clean code-generation structure.</li>
<li><strong>Create…</strong> – Context-aware; presents the correct template based on the parent node so you can bootstrap new artifacts instantly.</li>
<li><strong>Commit Log</strong> – Lists every change-set, author, timestamp, and description—ideal for change-tracing and team collaboration.</li>
<li><strong>Edit</strong> – Rename files, modify routes, or adjust other meta attributes.</li>
<li><strong>Delete</strong> – Removes files or folders (root directories are protected).</li>
<li><strong>Copy</strong> – Copies file content to clipboard for a quick clone.</li>
<li><strong>Paste</strong> – Appears only after a copy; completes the clone operation.</li>
<li><strong>Move / Cut</strong> – Allows repositioning of whole files or subtrees.</li>
</ul>
<blockquote>
<p>When a Repository is created the platform auto-generates <strong>canonical root directories</strong> according to project type. You cannot add additional root directories manually; you may, however, create unlimited subfolders.</p>
</blockquote>
<h4>Root Directory Guide</h4>
<ul>
<li><strong>Sections</strong> – Shared and reusable UI components; organized via internal folders (front-end projects only).</li>
<li><strong>Methods</strong> – Utility libraries grouped by business concern (method sets only).</li>
<li><strong>Pages</strong> – Actual rendered pages and layouts (front-end projects only).</li>
<li><strong>Assets</strong> – Images, fonts, icons, etc.; supports drag-and-drop upload and instant asset reference.</li>
<li><strong>Cache</strong> – Back-end caching policies; classes and strategies live here (back-end projects only).</li>
<li><strong>Controllers</strong> – Service APIs exposed by the back-end (back-end projects only).</li>
<li><strong>Project Config (file)</strong> – Global project settings: open components, globals, route guards, NPM packages, etc.</li>
<li><strong>Environment Variables (file)</strong> – Dedicated environment definition files to switch values between dev, test, and prod.</li>
</ul>
<h4>Opening Files</h4>
<ul>
<li><strong>Single-click</strong> → Opens the file for editing; keeps the workspace lean—unchanged files auto-close.</li>
<li><strong>Double-click</strong> → Pins the file so it stays on the tab strip even if unmodified.</li>
<li><strong>Open Editors Panel</strong> – Located below the file tree; lists all currently pinned tabs for lightning-fast navigation.</li>
</ul>
<h4>Saving Files</h4>
<p>Press <strong>Ctrl + S</strong> (Windows/Linux) or <strong>Cmd + S</strong> (macOS) to persist all changes instantly.</p>
<hr>
<h3>Keyboard Shortcuts</h3>
<p>Master these hotkeys for rapid interaction:</p>
<ul>
<li><strong>Ctrl/Cmd + S</strong> – Save Resource</li>
<li><strong>Ctrl/Cmd + P</strong> – Quick Resource Finder</li>
<li><strong>Ctrl/Cmd + C</strong> – Copy element in front-end visual pane</li>
<li><strong>Ctrl/Cmd + V</strong> – Paste element in front-end visual pane</li>
<li><strong>Ctrl/Cmd + Z</strong> – Undo last visual operation</li>
</ul>
<hr>
<h3>Component Data (front-end projects only)</h3>
<p>Open any <strong>Section</strong> or <strong>Page</strong>, and the left menu presents <strong>Component Data</strong>. Use it to inspect and edit:</p>
<ul>
<li><strong>State</strong></li>
<li><strong>Logic / Events</strong></li>
<li><strong>Layout tree outline</strong></li>
</ul>
<p><img src="/workbench/basic6.png" alt=""></p>
<hr>
<h3>Component Center (front-end projects only)</h3>
<p>While editing a <strong>Section</strong> or <strong>Page</strong>, the <strong>Component Center</strong> appears in the left panel. Here you can:</p>
<ul>
<li>See every available component in the project.</li>
<li><strong>Drag &amp; drop</strong> to embed new components instantly.</li>
<li>Install plug-ins from the <strong>Component/Method Market</strong>; installed plug-ins will populate the custom components list.</li>
</ul>
<p><img src="/workbench/basic7.png" alt=""><br>
<img src="/workbench/basic8.png" alt=""></p>
<hr>
<h3>Request Management (front-end <em>app</em> projects)</h3>
<p>Open the <strong>Request Management</strong> menu in the left panel. Launch the <strong>Request Management Editor</strong> to:</p>
<ul>
<li><strong>Create / Edit / Delete</strong> API interfaces declaratively.</li>
<li>Configure <strong>global request defaults</strong>: timeout, request interceptors, response transformers, etc.</li>
</ul>
<p><img src="/workbench/basic9.png" alt=""></p>
<hr>
<h3>Data Model (back-end <em>app</em> projects)</h3>
<p>Access the <strong>Data Model</strong> menu to:</p>
<ul>
<li>Click <strong>Manage Database</strong> and open an intuitive schema designer.</li>
<li>Build tables, relationships, composite indexes, constraints, and default values interactively—no SQL required.</li>
</ul>
<p><img src="/workbench/basic13.png" alt=""></p>
<hr>
<h3>Run &amp; Debug Panel</h3>
<p>The <strong>Run &amp; Debug</strong> panel lets you:</p>
<ul>
<li>Launch the project under the selected environment.</li>
<li>Attach the debugger, reload modules, and observe logs in real time.</li>
</ul>
<p><img src="/workbench/basic10.png" alt=""></p>
<hr>
<h3>Export Code</h3>
<p>From any development branch, open <strong>Export Code</strong> in the menu. A full-repository scan runs; zero <strong>issues</strong> must be reported before the export succeeds, guaranteeing clean deliverables.</p>
<p><img src="/workbench/basic11.png" alt=""></p>
<hr>
<h3>Component/Method Market</h3>
<p>Install, update, or uninstall plug-ins—each contributed by the community—directly from the <strong>Component/Method Market</strong>.</p>
<p><img src="/workbench/basic12.png" alt=""></p>
<hr>
<h3>Main Workspace</h3>
<p>The <strong>center area</strong> is the <strong>Main Workspace</strong>, where the visual editors render:</p>
<p><img src="/workbench/basic14.png" alt=""></p>
<ul>
<li><strong>Tab Bar</strong> – Lists all open/editable files.</li>
<li><strong>Editor Surface</strong> – Actual rendering region for configuration or code.</li>
</ul>
<p>Tab states:</p>
<ol>
<li><em>Italic</em> → Clean file, auto-closes when another file is focused.</li>
<li><strong>Dot icon</strong> → Unsaved changes.</li>
<li>Hover → Close button appears; unsaved changes trigger a save prompt.</li>
</ol>
<hr>
<h3>Status Bar</h3>
<p>The <strong>Status Bar</strong> at the bottom reports:</p>
<ul>
<li>Project name, category, and type</li>
<li><strong>Problems</strong> panel (integrated linter)</li>
<li>File size</li>
<li>Auth status</li>
</ul>
<p>Use <strong>Problems</strong> to review code issues; it must be empty before any release can pass the gated pipeline.</p>
<p><img src="/workbench/basic15.png" alt=""></p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>