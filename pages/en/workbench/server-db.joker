<template>
<div ref='container' class='joker-demo-container'>
<h2>Data Model Design</h2>
<p>This chapter focuses on how to create and manage data models in server-side application projects.</p>
<h3>Overview</h3>
<p>In <strong>server-side application</strong> projects, we can leverage data model design to plan database table structures. It enables us to quickly design database schemas in an intelligent, visual manner, covering <strong>data</strong>, <strong>field definitions</strong>, <strong>composite indexes</strong>, <strong>table relationships</strong>, and more.</p>
<h3>Creating a Table</h3>
<p>On the left-hand panel in the workbench, navigate to the <strong>Database</strong> menu to view the current database table tree. This menu can be accessed from any file to quickly inspect the table structure. To manage and maintain the tables, click the <strong>Manage Database</strong> button at the bottom of the panel, which opens the database management file. Here, you can create or edit data models to manage tables in the database.<br>
<img src="/workbench/server-db.png" alt=""></p>
<ul>
<li><strong>Model Name</strong>: Defines the table name (camelCase recommended).</li>
<li><strong>Model Alias</strong>: Assigns a readable name to the table for easier reference during development.</li>
<li><strong>Model Description</strong>: Provides detailed documentation about the table, helping developers understand its purpose.</li>
<li><strong>Use Recommended Properties</strong>: If enabled, the platform automatically generates common fields, including <strong>primary key (id)</strong>, <strong>creation time (createAt)</strong>, and <strong>update time (updateAt)</strong>.</li>
</ul>
<h3>Creating Table Fields</h3>
<p>After creating a data model (table), click <strong>Create Attribute</strong> in the model panel to open the field maintenance interface.<br>
<img src="/workbench/server-db1.png" alt=""></p>
<p>In the field configuration panel, the following properties must be maintained:</p>
<ul>
<li><strong>Name</strong>: The field name (recommended to use concise, meaningful English).</li>
<li><strong>Alias</strong>: A user-friendly label for the field, aiding quick comprehension.</li>
<li><strong>Description</strong>: A detailed explanation of the field's purpose, data source, constraints, etc., to prevent misunderstandings.</li>
<li><strong>Data Type</strong>: Specifies the data type of the field, influencing storage and operations:
<ol>
<li><strong>String</strong>: Stores text (e.g., names, addresses). Subtypes:
<ul>
<li><strong>UUID</strong>: Unique identifiers.</li>
<li><strong>TEXT</strong>: Longer text (e.g., descriptions).</li>
<li><strong>VARCHAR</strong>: Short, fixed-length text (e.g., codes).</li>
</ul>
</li>
<li><strong>Integer (Int)</strong>: Whole numbers (e.g., age, quantity).</li>
<li><strong>Decimal</strong>: Precise decimals (e.g., monetary values).</li>
<li><strong>Float</strong>: Approximate floating-point numbers (e.g., scientific data).</li>
<li><strong>DateTime</strong>: Dates/times (e.g., createAt, updateAt).</li>
<li><strong>Boolean</strong>: True/false values (e.g., payment status).</li>
<li><strong>Enum</strong>: Fixed value set (e.g., order status, user roles).</li>
<li><strong>Relationship Field</strong>: Establishes table associations (e.g., linking orders to products).</li>
</ol>
</li>
<li><strong>Primary Key</strong>: Marks the field as the table's unique identifier (only one per table).</li>
<li><strong>Default Value</strong>: Initial value if not explicitly set (e.g., default user role).</li>
<li><strong>Unique</strong>: Ensures field uniqueness (automatically indexed for faster queries).</li>
<li><strong>Not Null</strong>: Enforces mandatory field values (e.g., order amount cannot be empty).</li>
<li><strong>Array Type</strong>: Allows storing multiple values (e.g., tags, contact methods).</li>
<li><strong>Field Type</strong>: Further refines data storage (e.g., UUID vs. VARCHAR for strings).</li>
</ul>
<h3>Creating Table Relationships</h3>
<p>The platform provides an intelligent way to define table relationships. Below is an example with two tables:</p>
<h4>Product Table</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Field</th>
<th>Data Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>UUID</td>
<td>Product ID (PK)</td>
</tr>
<tr>
<td>name</td>
<td>String</td>
<td>Product Name</td>
</tr>
</tbody>
</table>
<h4>Order Table</h4>
<table class="mkd-table">
<thead>
<tr>
<th>Field</th>
<th>Data Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>UUID</td>
<td>Order ID (PK)</td>
</tr>
<tr>
<td>productId</td>
<td>String</td>
<td>References Product.id</td>
</tr>
<tr>
<td>createAt</td>
<td>DateTime</td>
<td>Creation Time</td>
</tr>
</tbody>
</table>
<h4>Establishing the Relationship</h4>
<p>To link <code>Order.productId</code> with <code>Product.id</code>, follow these steps in the Order table:<br>
<img src="/workbench/server-db2.png" alt=""></p>
<ol>
<li><strong>Ignore Field Naming Temporarily</strong>: The platform will auto-generate a name.</li>
<li><strong>Select Data Type</strong>: Choose <strong>Relationship Field</strong>.</li>
<li><strong>Define Relationship</strong>: Map <code>productId</code> to <code>Product.id</code>.</li>
<li><strong>Finalize Field Name</strong>: Edit the auto-generated name if needed.</li>
</ol>
<p>After creation:<br>
<img src="/workbench/server-db3.png" alt=""></p>
<ul>
<li><strong>Order Table</strong>: <code>productId</code> becomes a <strong>foreign key</strong>, and a <code>Product</code> field (with full product data) is added.</li>
<li><strong>Product Table</strong>: An <code>Order[]</code> field is added (one-to-many relationship), enabling quick access to all related orders.</li>
</ul>
<h3>Creating Composite Indexes</h3>
<p>Composite indexes enforce uniqueness and improve query performance for multi-field combinations. For example, in a permission table where a user can have only one role per organization, a composite index on <code>userId + orgId</code> ensures uniqueness.</p>
<p>To create one, click the <strong>dropdown arrow</strong> next to <code>Create Attribute</code> and select <strong>Create Composite Index</strong>.<br>
<img src="/workbench/server-db4.png" alt=""></p>
<p>In the editor, select two or more fields to form the index.<br>
<img src="/workbench/server-db5.png" alt=""></p>
<blockquote>
<p>This section covers data model design. For CRUD operations, refer to the <a href="/workbench/db-option" target="_blank">Data Operations</a> chapter.</p>
</blockquote>
<h3>Database Connection URL</h3>
<p>Configure the database URL in the <strong>Environment Settings</strong> file (currently supports <strong>PostgreSQL</strong>).<br>
<img src="/workbench/server-db6.png" alt=""></p>

<BottomNav />
</div>
</template>
<script>
import { Component } from "@joker.front/core";
import hljs from "highlight.js/lib/common";
import BottomNav from "../../../common/components/bottom-nav.joker";
export default class extends Component {
components={
BottomNav
}
mounted(){
let container= this.$getRef('container')?.output!;
container.querySelectorAll('pre code').forEach((el:HTMLElement) => {
        hljs.highlightElement(el);
      });
}
}
</script>